name: gitpod-setup

project_files:
  - gitpod-setup/

post_install_actions:
  # Copy over a base gitpod if one does not exist.
  - |
    if ! test -f ${DDEV_APPROOT}/.gitpod.yml; then
      cp ${DDEV_APPROOT}/.ddev/gitpod-setup/.gitpod.yml ${DDEV_APPROOT}/.gitpod.yml
    fi
  # If we control the ".gitpod.yml", merge in the framework setup.
  - |
    if grep -q '#ddev-generated' ${DDEV_APPROOT}/.gitpod.yml; then
      PROJECT_TASKS="$DDEV_PROJECT_TYPE.yml"
      if test -f ${DDEV_APPROOT}/.ddev/gitpod-setup/${PROJECT_TASKS}; then
        echo "Adding $DDEV_PROJECT_TYPE specific settings"
        cat ${DDEV_APPROOT}/.ddev/gitpod-setup/${PROJECT_TASKS} > ${DDEV_APPROOT}/.gitpod.yml
      elif [[ "$DDEV_PROJECT_TYPE" =~ "drupal" ]] && [ -f "${DDEV_APPROOT}/.ddev/gitpod-setup/drupal.yml" ]; then
        echo "Adding Drupal specific settings"
        cat ${DDEV_APPROOT}/.ddev/gitpod-setup/drupal.yml > ${DDEV_APPROOT}/.gitpod.yml
      fi
      cat ${DDEV_APPROOT}/.ddev/gitpod-setup/.gitpod.yml >> ${DDEV_APPROOT}/.gitpod.yml
    fi

removal_actions:
  - |
    if grep -q '#ddev-generated' ${DDEV_APPROOT}/.gitpod.yml; then
      rm -f ${DDEV_APPROOT}/.gitpod.yml
    else
      echo "Unwilling to remove '${DDEV_APPROOT}/.gitpod.yml' because it does not have #ddev-generated in it; you can manually delete it if it is safe to delete."
    fi

# Version constraint for DDEV that will be validated against the running DDEV executable
# and prevent add-on from being installed if it doesn't validate.
# See https://github.com/Masterminds/semver#checking-version-constraints for constraint rules.
# Available with DDEV v1.23.4+, and works only for DDEV v1.23.4+ binaries
ddev_version_constraint: '>= v1.24.3'
